/*
 * A rust replacement for vsv
 *
 * Original: https://github.com/bahamas10/vsv
 *
 * Author: Dave Eddy <dave@daveeddy.com>
 * Date: January 25, 2022
 * License: MIT
 */

use yansi::{Color, Style, Paint};
use anyhow::{Context, Result};
use rayon::prelude::*;

mod arguments;
mod config;
mod die;
mod runit;
mod utils;
mod service;

use die::die;
use service::Service;
use config::Config;

macro_rules! verbose {
    ($cfg:expr, $fmt:expr $(, $args:expr )* $(,)? ) => {
        if $cfg.verbose > 0 {
            let s = format!($fmt $(, $args)*);
            eprintln!(">  {}", Style::default().dimmed().paint(s));
        }
    };
}

fn do_status(cfg: &Config) -> Result<()> {
    // find all services
    let services = runit::get_services(&cfg.svdir, cfg.log)
        .with_context(|| format!("failed to list services in {:?}", cfg.svdir))?;

    // process each service found (just gather data here, can be done in parallel)
    let services: Vec<Service> = services
        .par_iter()
        .map(|service| {
            Service::from_runit_service(service, cfg.tree)
        })
        .collect();

    // print gathared data
    let bold_style = Style::default().bold();

    println!();
    verbose!(cfg, "found {} services in {:?}", services.len(), cfg.svdir);
    println!("{}", utils::format_status_line(
        ("", &bold_style),
        ("SERVICE", &bold_style),
        ("STATE", &bold_style),
        ("ENABLED", &bold_style),
        ("PID", &bold_style),
        ("COMMAND", &bold_style),
        ("TIME", &bold_style),
    ));

    // print each service found
    for service in services {
        println!("{}", service);

        // print any verbose messages/warnings generated by the service
        for message in service.messages {
            verbose!(cfg, "{}", message);
        }
    }

    println!();

    Ok(())
}

fn do_main() -> Result<()> {
    // disable color until we absolutely know we want it
    Paint::disable();

    // parse CLI options + env vars
    let args = arguments::parse();
    let cfg = Config::from_args(args)?;

    if cfg.colorize {
        Paint::enable();
    }

    // figure out subcommand to run
    do_status(&cfg)
}

fn main() {
    let ret = do_main();

    if let Err(err) = ret {
        die!(1, "{}: {:?}",
            Color::Red.paint("error"),
            err);
    }
}
